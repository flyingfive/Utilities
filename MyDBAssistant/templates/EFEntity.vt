using System;
using System.Linq;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations.Schema;
using Xen.Helper;
using Xen.Helper.Data;

namespace ${ns}
{
	/// <summary>
	/// $table.TableDescription
	/// </summary>
	[Serializable]
	public class ${className} : BaseEntity
	{
#foreach($column in $columns)

		/// <summary>
		/// $column.ColumnDescription
		/// </summary>
		public virtual $column.CSharpType $column.PropertyName { get; set; }
#end
	}
	
	public class ${className}Map : EntityTypeConfiguration<${className}>
	{
		public ${className}Map()
		{
			this.ToTable("$table.TableName");

#if(${hasCustomPrimaryKey})
			this.HasKey($efKey);

#foreach($prop in $columns)
#if(!$prop.IsPrimaryKey)
			this.Property(entity => entity.$prop.PropertyName).HasColumnName("$prop.ColumnName")#if(!$prop.IsNullable).IsRequired()#end#if($prop.CSharpType.Equals("String")).HasMaxLength($prop.Size)#end#if($prop.IsIdentity).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)#end;

#end
#end
#else
#foreach($column in $primaryColumns)
			this.HasKey(entity => entity.$column.PropertyName);

#end
#foreach($prop in $columns)
#if(!$prop.IsPrimaryKey)
			this.Property(entity => entity.$prop.PropertyName).HasColumnName("$prop.ColumnName")#if(!$prop.IsNullable).IsRequired()#end#if($prop.CSharpType.Equals("String")).HasMaxLength($prop.Size)#end#if($prop.IsIdentity).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)#end;

#end
#end
#end
		}
	}
}