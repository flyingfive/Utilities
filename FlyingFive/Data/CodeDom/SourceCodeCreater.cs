using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CSharp;

namespace FlyingFive.Data.CodeDom
{
    /// <summary>
    /// C#模型源码（类型）生成器
    /// </summary>
    public class SourceCodeCreater
    {
        private string _sourceCode = null;
        private CodeCompileUnit _targetUnit = null;
        private CodeTypeDeclaration _targetClass = null;
        private string _namespace = "__FlyingFive.AutoGenerated";
        private string _className = null;
        private Dictionary<string, Type> _propertyData = null;
        public string TypeName
        {
            get
            {
                return string.Format("{0}.{1}", _namespace, _className);
            }
        }
        /// <summary>
        /// 创建一个源码（类型）生成器实例
        /// </summary>
        /// <param name="className">类型名称</param>
        /// <param name="propertyData">类型上的属性列表</param>
        public SourceCodeCreater(string className, Dictionary<string, Type> propertyData)
        {
            _propertyData = propertyData;
            _className = className;
            _targetUnit = new CodeCompileUnit();
            var ns = new CodeNamespace(_namespace);
            ns.Imports.Add(new CodeNamespaceImport("System"));
            _targetClass = new CodeTypeDeclaration(className);
            _targetClass.IsClass = true;
            _targetClass.TypeAttributes = TypeAttributes.Public | TypeAttributes.Sealed;
            ns.Types.Add(_targetClass);
            _targetUnit.Namespaces.Add(ns);
        }

        /// <summary>
        /// 生成C#类型的字符串源码
        /// </summary>
        /// <returns></returns>
        public string CreateCodeSource()
        {
            AddMembers();
            AddCtor();
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                var options = new CodeGeneratorOptions();
                options.BracingStyle = "C";
                using (StringWriter sourceWriter = new StringWriter())
                {
                    provider.GenerateCodeFromCompileUnit(_targetUnit, sourceWriter, options);
                    _sourceCode = sourceWriter.ToString();
                }
                return _sourceCode;
            }
        }

        /// <summary>
        /// 构建对应的C# Type
        /// </summary>
        /// <returns></returns>
        public Type BuildCSharpType()
        {
            if (string.IsNullOrEmpty(_sourceCode)) { this.CreateCodeSource(); }
            using (var provider = new CSharpCodeProvider())
            {
                var param = new CompilerParameters(new string[] { "System.dll" });
                var result = provider.CompileAssemblyFromSource(param, _sourceCode);
                var type = result.CompiledAssembly.GetType(TypeName);
                return type;
            }
        }

        /// <summary>
        /// 添加属性成员
        /// </summary>
        private void AddMembers()
        {
            foreach (var key in _propertyData.Keys)
            {
                var field = new CodeMemberField();
                field.Attributes = MemberAttributes.Private;
                field.Name = string.Format("_{0}{1}", key.Substring(0, 1).ToLower(), key.Substring(1));
                field.Type = new CodeTypeReference(_propertyData[key]);
                _targetClass.Members.Add(field);

                var property = new CodeMemberProperty();
                property.Attributes = MemberAttributes.Public | MemberAttributes.Final;
                property.Name = key;
                property.GetStatements.Add(new CodeMethodReturnStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), field.Name)));
                property.SetStatements.Add(new CodeAssignStatement(new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), field.Name), new CodePropertySetValueReferenceExpression()));
                property.Type = new CodeTypeReference(_propertyData[key]);
                _targetClass.Members.Add(property);
            }
        }

        /// <summary>
        /// 添加默认空参构建方法
        /// </summary>
        private void AddCtor()
        {
            CodeConstructor constructor = new CodeConstructor();
            constructor.Attributes = MemberAttributes.Public | MemberAttributes.Final;
            _targetClass.Members.Add(constructor);
        }
    }
}
